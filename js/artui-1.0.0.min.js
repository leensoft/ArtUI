(function ($) {
    $.fn.Calendar = function (options) {
        var self = this;
        var defaultVal = {
            targetCls: '',
            beginyear: 1978,
            endyear: 2050,
            date: new Date(),
            type: "yyyy-mm-dd",
            offset: { x: 0, y: 0 },
            separator: "-",
            wday: 0,
            isshowhour: false,
            language: {
                year: "年",
                month: "月",
                monthList: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
                weekList: ["日", "一", "二", "三", "四", "五", "六"]
            }
        };
        var obj = $.extend(defaultVal, options);
        var currTime = "";
        var monthDay = new Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
        var baseHtml = "<div class='cxcalendar'>" + "<div class='date_hd'>" + "<a class='date_pre' rel='prev'></a>" + "<a class='date_next' rel='next'></a>" + "<div class='date_txt'>" + "<span class='y'></span> 年" + "<span class='m'>11</span> 月" + "</div>" + "<div class='date_set'>" + "<select class='year_set'></select>-" + "<select class='month_set'></select>" + "</div></div>" + "<table class='date_table'>" + "<thead><tr></tr></thead>" + "<tbody id='test'></tbody>" + "</table>" + "</div>";
        var lockHtml = "<div class='cxcalendar_lock'></div>";
        var hourHtml = "<table><thead><tr></tr></thead><tbody><tr>"
                      + "<td><input name='hour' type='text'  style='width:20px;float:left;' /> 时</td>"
                      + "<td><input name='minute' type='text' style='width:20px;float:left;' /> 分</td>"
                      + "<td><input name='second' type='text'  style='width:20px;float:left;' /> 秒</td>"
                      + "<td> <input name='btnSave' type='button' value='确认' />  </td>"
                      + "</tr></tbody></table>";
        var $baseHtml = $(baseHtml);
        var $lockHtml = $(lockHtml);
        var $hourHtml = $(hourHtml);

        var $dateTxt = $baseHtml.find('.date_txt');
        var $dateSet = $baseHtml.find('.date_set');
        var $yearList = $baseHtml.find('.year_set');
        var $monthList = $baseHtml.find('.month_set');
        var $thead = $baseHtml.find('table.date_table thead');
        var $tbody = $baseHtml.find('table.date_table tbody');
        var renderHourBody = function (t) {
            var date = new Date();
            if (t != "" && t != undefined) {
                date = new Date(t);
            }
            var hour = date.getHours();
            var minute = date.getMinutes();
            var second = date.getSeconds();

            $hourHtml.find('input[type=text]').keypress(function (event) {
                var keyCode = event.which;
                if (keyCode == 46 || (keyCode >= 48 && keyCode <= 57))
                    return true;
                else
                    return false;
            }).mouseout(function () {
                var txt = $(this).val();
                var num = parseInt(txt);
                var maxNum = 60;
                if ($(this).attr("name") == "hour") {
                    maxNum = 12;
                }
                if (num > maxNum) {
                    $(this).val("0");
                }
            }).focus(function () {
                this.style.imeMode = 'disabled';
            });

            var $hour = $hourHtml.find('input[name="hour"]').val(hour);
            var $minute = $hourHtml.find('input[name="minute"]').val(minute);
            var $second = $hourHtml.find('input[name="second"]').val(second);

            $hourHtml.find('input[name="btnSave"]').on("click", function () {
                var day = $baseHtml.find('.selected').attr("title");
                var t = day + " " + pad($hour.val(), 2) + ":" + pad($minute.val(), 2) + ":" + pad($second.val(), 2);
                self.val(t);
                self.focus().blur();
                hideCalendar();
            });
        };
        var renderCalendarPanel = function (t) {
            var optionobj = $('<option></option>');
            for (var i = obj.beginyear; i < obj.endyear; i++) {
                $yearList.append(optionobj.attr('value', i).html(i).clone())
            }
            for (var i = 0; i < 12; i++) {
                $monthList.append(optionobj.attr('value', i + 1).html(obj.language.monthList[i]).clone())
            }
            var thobj = $('<th></th>');
            for (var i = 0; i < 7; i++) {
                var row = thobj.html((i + obj.wday * 1 < 7) ? obj.language.weekList[i + obj.wday] : obj.language.weekList[i + obj.wday - 7]).clone();
                $thead.append(row)
            }
            $baseHtml.appendTo("body");
            $lockHtml.appendTo("body");
            var currYear = new Date().getFullYear();
            var currMonth = new Date().getMonth() + 1;
            renderMonthBody(currYear, currMonth);
            if (obj.isshowhour) {
                $baseHtml.append($hourHtml);
                renderHourBody(t);
            }
        };
        var getDayNumOfMonth = function (y, m) {
            var d = new Date(y, m, 0);
            return d.getDate()
        };
        var isLeapYear = function (y) {
            return ((y % 4 == 0 && y % 100 != 0) || y % 400 == 0) ? 1 : 0
        };
        var pad = function (num, n) {
            return Array(n > num ? (n - ('' + num).length + 1) : 0).join(0) + num;
        };
        var getDayStyle = function (year, month, day, txtMonth) {
            var valDate = currTime;
            var style = "";
            var arrs = valDate.split(obj.separator);
            var diffSet = Date.parse(new Date(arrs[0], arrs[1], arrs[2])) - Date.parse(new Date(year, month, day));
            if (month > txtMonth || month < txtMonth) {
                style = "disabled"
            }
            if (diffSet == 0) {
                style += " selected"
            }
            return style
        };
        var renderMonthBody = function (year, month) {
            var currMonth = month,
                txtMonth = month;
            if (month < 1) {
                year--;
                month = 12
            } else if (month > 12) {
                year++;
                month = 1
            }
            $tbody.empty();
            var prevMonth = month - 1,
                prevDay = getDayNumOfMonth(year, prevMonth),
                nextMonth = month + 1,
                nextDay = getDayNumOfMonth(year, nextMonth),
                curDay = getDayNumOfMonth(year, month);
            var temp_date = new Date(year, month - 1, 1);
            var firstDay = temp_date.getDay() - obj.wday < 0 ? temp_date.getDay() - obj.wday + 7 : temp_date.getDay() - obj.wday;
            var monthRows = Math.ceil((firstDay + monthDay[month - 1]) / 7);
            var tdNum, dayNum;
            var trobj = $('<tr></tr>'),
                tdobj = $('<td></td>');
            for (var i = 0; i < monthRows; i++) {
                var row1 = trobj.clone();
                for (var j = 0; j < 7; j++) {
                    tdNum = i * 7 + j;
                    dayNum = tdNum - firstDay + 1;
                    txtMonth = month;
                    if (dayNum <= 0) {
                        dayNum = prevDay + dayNum;
                        txtMonth = prevMonth
                    } else if (dayNum > monthDay[month - 1]) {
                        dayNum = dayNum - curDay;
                        txtMonth = nextMonth
                    };
                    var numstyle = getDayStyle(year, month, dayNum, txtMonth);
                    var row2 = tdobj.clone();
                    row2.attr('title', year + obj.separator + month + obj.separator + dayNum).attr('class', 'num ' + numstyle).attr('data-day', dayNum).html(dayNum);
                    row1.append(row2)
                }
                $tbody.append(row1)
            }
            $baseHtml.find('.y').html(year);
            $baseHtml.find('.m').html(obj.language.monthList[month - 1]);
            $yearList.val(year);
            $monthList.val(month)
        };
        var bindEnv = function () {
            self.unbind('click').bind('click', function () {
                showCalendar();
            });
            $lockHtml.unbind('click').bind('click', function () {
                hideCalendar();
            });
            $baseHtml.delegate('a', 'click', function () {
                if (!this.rel) {
                    return
                };
                var _rel = this.rel;
                if (_rel == 'prev') {
                    renderMonthBody($yearList.val(), parseInt($monthList.val(), 10) - 1);
                    return
                } else if (_rel == 'next') {
                    renderMonthBody($yearList.val(), parseInt($monthList.val(), 10) + 1);
                    return
                }
            });
            $baseHtml.delegate('td', 'click', function () {
                var $this = $(this);
                if ($this.hasClass('num') && !$this.hasClass('disabled')) {
                    $tbody.find("td").removeClass("selected");
                    $this.addClass("selected");
                    var day = $this.attr("title");
                    if (!obj.isshowhour) {
                        self.val(day);
                        self.focus().blur();
                        hideCalendar();
                    }
                }
            });

            $baseHtml.find('.date_txt').unbind('click').bind("click", function () {
                $(this).hide();
                $(this).next().show();
            });
            $yearList.unbind('change').bind("change", function () {
                renderMonthBody($yearList.val(), $monthList.val())
            });
            $monthList.unbind('change').bind("change", function () {
                renderMonthBody($yearList.val(), $monthList.val())
            })
        };
        var showCalendar = function () {
            var doc_w = document.body.clientWidth,
                doc_h = document.body.clientHeight,
                pane_top = self.offset().top,
                pane_left = self.offset().left,
                obj_w = self.outerWidth(),
                obj_h = self.outerHeight();
            pane_top = pane_top + obj_h;
            $baseHtml.css({
                "top": pane_top + obj.offset.y,
                "left": pane_left + obj.offset.x
            }).show();
            $lockHtml.css({
                "width": "1000",
                "height": "1000"
            }).show();
            return this
        };
        var hideCalendar = function () {
            $baseHtml.hide();
            $lockHtml.hide()
        };

        var getCurrTime = function (char) {
            var time = new Date();
            if (char != "" && char != undefined) {
                time = new Date(char);
            }
            var m = time.getMonth() + 1;
            var t = time.getFullYear() + obj.separator + m + obj.separator
              + time.getDate();
            return t;
        };
        return this.each(function () {
            self = $(this);
            var t = $(this).val();
            currTime = getCurrTime(t);
            renderCalendarPanel(t);
            bindEnv();
        });
    }
})(jQuery);
(function ($) {
    var defaultVal = {
        ctrls: [],
        btnSubmit: "",
        posturl: "",
        fields: null,
        isEnable: true,
        onSubmit: null,
        onFocus: function (id, msg) { },
        onSuccess: function (id, msg) {
            $("#" + id).css("border-color", "");
        },
        onFailed: function (id, msg) {
            $("#" + id).css("border-color", "#E2003B");
        },
        callback: function (data) { }
    };
    var serializeObject = function (f) {
        var result = [];
        var o = {};
        var a = f.serializeArray();
        $.each(a, function () {
            var $this = $('input[name=' + this.name + '],select[name=' + this.name + '],textarea[name=' + this.name + ']');
            if ($this.attr('datatype') != null) {
                o = {
                    'id': $this.attr('name'),
                    rules: [{
                        'type': $this.attr('datatype'),
                        'par': $this.attr('datapar'),
                        'msg': $this.attr('errormsg')
                    }]
                };
                result.push(o)
            }
        });
        return result
    };
    $.fn.valid = function (options) {
        var onCheck = function (obj, ctr, action) {
            var selfVal = $('#' + ctr.id).val();
            var flag = false;
            $.each(ctr.rules, function (i, rule) {
                rule.val = selfVal;
                if ($.fn.valid.validRules[rule.type].apply(this, Array.prototype.slice.call(arguments, 1))) {
                    if (action != "submit") {
                        obj.onSuccess(ctr.id, rule.msg);
                    }
                    $(obj.btnSubmit).removeAttr("disabled");
                    flag = true;
                } else {
                    obj.onFailed(ctr.id, rule.msg);
                    $(obj.btnSubmit).attr("disabled", "disabled");
                    flag = false;
                }
            });
            return flag;
        };

        return this.each(function () {
            var elem = $(this);
            var obj = $.extend(false, defaultVal, options);
            obj.ctrls = serializeObject(elem);

            var data = $(this).data(elem.context.parentNode.id);
            if (data) {
                obj = $.extend(data.options, options)
            }
            $(this).data(elem.context.parentNode.id, {
                options: obj
            });
            if (obj.isEnable) {

                $.each(obj.ctrls, function (i, ctr) {
                    $('#' + ctr.id).live("blur", function () {
                        onCheck(obj, ctr, "blur")
                    });
                });
                $(obj.btnSubmit).mousedown(function () {
                    var validCount = 0;
                    $.each(obj.ctrls, function (i, ctr) {
                        if (onCheck(obj, ctr, "submit")) {
                            validCount++;
                        }
                    });
                    if (validCount != obj.ctrls.length) {
                        return;
                    }

                    if (obj.onSubmit != null) {
                        $(obj.btnSubmit).attr("disabled", "disabled");
                        obj.onSubmit(elem);
                        $(obj.btnSubmit).removeAttr("disabled");
                    } else {
                        obj.fields = elem.serializeJson();
                        if ($(obj.btnSubmit).attr('disabled') != 'disabled') {
                            $(obj.btnSubmit).attr("disabled", "disabled");
                            $.post(obj.posturl, obj.fields, function (data) {
                                obj.callback(data);
                                $(obj.btnSubmit).removeAttr("disabled");
                            })
                        }
                    }
                })
            }
        })
    };
    $.fn.valid.validRules = {
        isNull: function (rule) {
            return (rule.val != "")
        },
        isMoreThan: function (rule) {
            return rule.val.length > parseInt(rule.par)
        },
        isMobile: function (rule) {
            return new RegExp(artui.validateRegExp.mobile).test(rule.val)
        },
        isEmail: function (rule) {
            return new RegExp(artui.validRegExp.email).test(rule.val)
        },
        isNumber: function (rule) {
            return new RegExp(artui.validRegExp.number).test(rule.val)
        },
        isFloat: function (rule) {
            return new RegExp(artui.validRegExp.float).test(rule.val)
        }
    }
})(jQuery);
(function ($) {
    $.fn.serializeObject = function () {
        var o = {};
        var a = this.serializeArray();
        $.each(a, function () {
            if (o[this.name]) {
                if (!o[this.name].push) {
                    o[this.name] = [o[this.name]]
                }
                o[this.name].push(this.value || '')
            } else {
                o[this.name] = this.value || ''
            }
        });
        return o
    }
})(jQuery);
(function ($) {
    $.fn.serializeJson = function () {
        var serializeObj = {};
        var array = this.serializeArray();
        var str = this.serialize();
        $(array).each(function () {
            if (serializeObj[this.name]) {
                if ($.isArray(serializeObj[this.name])) {
                    serializeObj[this.name].push(this.value)
                } else {
                    serializeObj[this.name] = [serializeObj[this.name], this.value]
                }
            } else {
                serializeObj[this.name] = this.value
            }
        });
        return serializeObj
    }
})(jQuery);
(function ($) {
    $.fn.tooltip = function (options) {
        var defaultVal = {
            isshow: true,
            tooltip: '',
            toolclass: 'tool',
            toolico: '<img id="ico" src="~/images/wx.jpg"/>'
        };
        var obj = $.extend(defaultVal, options);
        var self = $(this);
        var x = 10;
        var y = 20;
        var init = function () {
            $('.' + obj.toolclass).remove();
            if (obj.isshow) {
                self.mouseover(function (e) {
                    var tooltip = $('<div></div>').addClass(obj.toolclass).html(obj.toolico + obj.tooltip);
                    $('body').append(tooltip);
                    $('.' + obj.toolclass).css({
                        'top': (e.pageY + y) + 'px',
                        'left': (e.pageX + x) + 'px'
                    }).show('fast')
                }).mouseout(function () {
                    $('.' + obj.toolclass).remove()
                }).mousemove(function (e) {
                    $('.' + obj.toolclass).css({
                        'top': (e.pageY + y) + 'px',
                        'left': (e.pageX + x) + 'px'
                    })
                })
            } else {
                self.unbind('mouseover')
            }
        };
        init()
    }
})(jQuery);
(function ($) {
    $.fn.fengge = function (options) {
        var defaultVal = {
            left: 'side',
            right: 'main',
            middle: 'split',
            showclass: 'splitter-right',
            hideclass: 'splitter-left',
            fixh: 100
        };
        var obj = $.extend(defaultVal, options);
        var leftelem = $('#' + obj.left);
        var rightelem = $('#' + obj.right);
        var middleelem = $('#' + obj.middle);
        var eventelem = $(this);
        var getHeight = function () {
            var winH = $(window).height();
            leftelem.css("height", (winH - obj.fixh) + 'px');
            rightelem.css('height', (winH - obj.fixh) + 'px');
            middleelem.css('height', (winH - obj.fixh) + 'px');
        };
        var init = function () {
            leftelem.css({
                'height': '100%',
                'float': 'left'
            });
            rightelem.css({
                'height': '100%',
                'float': 'none'
            });
            getHeight()
        };
        return this.each(function () {
            init();
            var eventelem = $(this);
            eventelem.click(function () {
                if (eventelem.children().hasClass(obj.showclass)) {
                    leftelem.show();
                    eventelem.children().removeClass(obj.showclass);
                    eventelem.children().addClass(obj.hideclass)
                } else {
                    leftelem.hide();
                    eventelem.children().removeClass(obj.hideclass);
                    eventelem.children().addClass(obj.showclass)
                }
            })
        })
    }
})(jQuery);
(function ($) {
    $.fn.myacordion = function (options) {
        var defaultVal = {
            elemevent: function () { }
        };
        var obj = $.extend(defaultVal, options);
        var self = $(this);
        var init = function () {
            self.toggle(function () {
                $(this).prev().slideToggle(300, function () {
                    obj.elemevent()
                })
            }, function () {
                $(this).prev().slideToggle(300, function () {
                    obj.elemevent()
                })
            })
        };
        init()
    }
})(jQuery);
(function ($) {
    var defaultVal = {
        tabbox: '',
        selected: '',
        hover: '',
        evt: 'click',
        onCreate: null
    };
    var methods = {
        init: function (options) {
            var obj = $.extend(false, defaultVal, options);
            var self = $(this);
            return this.each(function () {
                var elem = $(this);
                elem.css('cursor', 'pointer');
                elem.bind(obj.evt, (function () {
                    $(this).removeClass().addClass(obj.selected).siblings().removeClass(obj.selected).addClass(obj.hover);
                    var index = self.index(this);
                    if (obj.onCreate != null) {
                        obj.onCreate(index)
                    }
                    $(obj.tabbox).eq(index).show().siblings('div').hide()
                }))
            })
        },
        setTab: function (index, options) {          
            var obj = $.extend(defaultVal, options);
            $(this).eq(index).addClass(obj.selected).siblings().removeClass(obj.selected);
            $(obj.tabbox).eq(index).show().siblings().hide()
        }
    };
    $.fn.tabmenu = function (method) {
        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1))
        } else if (typeof (method) == 'object' || !method) {
            return methods.init.apply(this, arguments)
        } else {
            return methods.init.apply(this, {})
        }
    }
})(jQuery);
(function ($) {
    var disabledClass = "l-btn-disabled";
    var privatefuc = {
        elemevt: function (obj) {
            if (obj.disabled == false) {
                var elem = $(this);
                var tool = obj.toolbar;
                elem.click(function () {
                    $.each(tool, function (i, n) {
                        if (n.icon == elem.attr('icon')) {
                            n.elemevent(elem)
                        }
                    })
                });
                elem.hover(function () {
                    elem = $(this);
                    elem.addClass(obj.hoverclass)
                }, function () {
                    elem.removeClass().addClass('easyui-linkbutton').addClass('l-btn-base')
                })
            }
        }
    };
    var methods = {
        init: function (options) {
            var obj = $.extend({}, $.fn.linkbutton.defalutVal, options);
            var data = $(this).data("linkbutton");
            if (data) {
                obj = $.extend({}, data.options, options)
            }
            $(this).data("linkbutton", {
                options: obj
            });
            return this.each(function () {
                var elem = $(this);
                var txt = elem.html();
                elem.addClass('l-btn-base').wrapInner("<span class=\"l-btn-text\"></span>");
                elem.find('.l-btn-text').addClass($(this).attr('icon')).css("padding-left", "20px");
                if (obj.onCreate != null) {
                    obj.onCreate(elem)
                }
                privatefuc.elemevt.call(elem, obj)
            })
        },
        setStyle: function (s) {
            var elem = $(this);
            return this.each(function () {
                var elem = $(this);
                if (s == "d") {
                    elem.addClass(disabledClass);
                    elem.unbind("click").unbind("hover")
                } else {
                    elem.removeClass(disabledClass)
                }
            })
        },
        push: function (n) {
            var obj1 = $(this).data("linkbutton")['options'];
            obj1.toolbar.push(n)
        },
        destroy: function () {
            return this.each(function () {
                var $this = $(this),
                    data = $this.data('linkbutton')
            })
        }
    };
    $.fn.linkbutton = function (method) {
        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof (method) == 'object' || !method) {
            return methods.init.apply(this, arguments);
        } else {
            $.error('Method ' + method + ' does not exist on jQuery.tooltip');
        }
    };
    $.fn.linkbutton.defalutVal = {
        toolbar: [],
        disabled: false,
        hoverclass: 'l-btn-base l-btn-hover',
        activeclass: '',
        onCreate: null
    }
})(jQuery);
(function ($) {
    $.fn.listboxorder = function (options) {
        var defaultVal = {
            up: 'up',
            down: 'down'
        };
        var obj = $.extend(defaultVal, options);
        var self = $(this);
        var init = function () {
            $('#' + obj.up).click(function () {
                var curr = self.find('option:selected');
                var prev = curr.eq(0).prev();
                curr.insertBefore(prev)
            });
            $('#' + obj.down).click(function () {
                var curr = self.find('option:selected');
                var next = curr.eq(curr.length - 1).next();
                curr.insertAfter(next)
            })
        };
        init()
    }
})(jQuery);
(function ($) {
    $.fn.multilistbox = function (options) {
        var defaultVal = {
            listbox2: '',
            add: '',
            add_all: '',
            remove: '',
            remove_all: ''
        };
        var obj = $.extend(defaultVal, options);
        var self = $(this);
        var init = function () {
            $('#' + obj.add).click(function () {
                self.find('option:selected').appendTo('#' + obj.listbox2).attr("selected", true)
            });
            $('#' + obj.remove).click(function () {
                $('#' + obj.listbox2).find('option:selected').appendTo(self).removeAttr("selected")
            });
            $('#' + obj.add_all).click(function () {
                self.find('option').appendTo('#' + obj.listbox2).attr("selected", true)
            });
            $('#' + obj.remove_all).click(function () {
                $('#' + obj.listbox2).find('option').appendTo(self).removeAttr("selected")
            });
            self.dblclick(function () {
                $("option:selected", self).appendTo('#' + obj.listbox2).attr("selected", true)
            });
            $('#' + obj.listbox2).dblclick(function () {
                $("option:selected", this).appendTo(self).removeAttr("selected");
                $('#' + obj.listbox2).find('option').attr("selected", true)
            })
        };
        init()
    }
})(jQuery);
(function ($) {
    var defaultVal = {
        url: '',
        val: '',
        text: '',
        pid: '0',
        areas: [{
            selectId: '',
            selectVal: '',
            isable: 1
        }, {
            selectId: '',
            selectVal: '',
            isable: 1
        }, {
            selectId: '',
            selectVal: '',
            isable: 1
        }]
    };
    $.fn.citybox = function (options) {
        var obj = $.extend(false, defaultVal, options);
        var optionnode = function (ddl, defaultVal, nodestate) {
            $.getJSON(obj.url, {
                pid: obj.pid
            }, function (data) {
                var row = ddl.children('option').eq(0);
                if (data != null) {
                    $.each(data.rows, function (i, n) {
                        row = row.clone();
                        row.val(n[obj.val]).html(n[obj.text]);
                        row.appendTo(ddl)
                    })
                }
                if (defaultVal != '') {
                    ddl.val(defaultVal)
                } else {
                    ddl.val("")
                } if (nodestate == '0') {
                    ddl.attr('disabled', 'disabled')
                }
            })
        };
        return this.each(function () {
            optionnode($(obj.areas[0].selectId), obj.areas[0].selectVal, obj.areas[0].isable);
            $.each(obj.areas, function (i, n) {
                if (i < obj.areas.length - 1) {
                    obj.pid = n.selectVal;
                    if (n.selectVal != "") {
                        optionnode($(obj.areas[i + 1].selectId), obj.areas[i + 1].selectVal, obj.areas[i + 1].isable);
                    }
                    $(n.selectId).change(function () {
                        $.each(obj.areas, function (j, k) {
                            if (j > i) {
                                $(k.selectId).find('option:gt(0)').remove();
                            }
                        });
                        obj.pid = $(this).val();
                        optionnode($(obj.areas[i + 1].selectId), '', '1')
                    })
                }
            })
        })
    }
})(jQuery);
(function ($) {
    var defaultVal = {
        url: '',
        val: '',
        text: '',
        param: null,
        areas: [{
            selectId: '',
            selectVal: '',
            isable: 1
        }, {
            selectId: '',
            selectVal: '',
            isable: 1
        }, {
            selectId: '',
            selectVal: '',
            isable: 1
        }]
    };
    $.fn.ddlbox = function (options) {
        var obj = $.extend(false, defaultVal, options);
        var optionnode = function (ddl, defaultVal, nodestate) {
            $.getJSON(obj.url, obj.param, function (data) {
                var row = $('<option></option>');
                if (data != null) {
                    $.each(data.rows, function (i, n) {
                        row = row.clone();
                        row.val(n[obj.val]).html(n[obj.text]);
                        row.appendTo(ddl)
                    })
                }
                if (defaultVal != '') {
                    ddl.val(defaultVal)
                } else {
                    ddl.val("")
                } if (nodestate == '0') {
                    ddl.attr('disabled', 'disabled')
                }
            })
        };
        return this.each(function () {
            $(this).find('option:gt(0)').remove();
            optionnode($(obj.areas[0].selectId), obj.areas[0].selectVal, obj.areas[0].isable);
            $.each(obj.areas, function (i, n) {
                if (i < obj.areas.length - 1) {
                    obj.pid = n.selectVal;
                    optionnode($(obj.areas[i + 1].selectId), obj.areas[i + 1].selectVal, obj.areas[i + 1].isable);
                    $(n.selectId).change(function () {
                        $.each(obj.areas, function (j, k) {
                            if (j > i) {
                                $(k.selectId).find('option:gt(0)').remove()
                            }
                        });
                        obj.pid = $(this).val();
                        optionnode($(obj.areas[i + 1].selectId), '', '1')
                    })
                }
            })
        })
    }
})(jQuery);
(function ($) {
    var defaultVal = {
        len: 10,
        container_width: 100,
        page_size: 6,
        right_btn: null,
        left_btn: null,
        rightEvt: function () { },
        leftEvt: function () { }
    };
    $.fn.imgSlide = function (options) {
        var obj = $.extend(defaultVal, options);
        return this.each(function () {
            var $parent = $(this);
            var page = 1;
            var page_count = obj.len;
            if ($parent.length < obj.len) {
                $parent.append($parent.children().clone())
            }
            $(obj.right_btn).click(function () {
                obj.rightEvt();
                if (!$parent.is(":animated")) {
                    if (page == page_count) {
                        $parent.animate({
                            left: 0
                        }, 800);
                        page = 1
                    } else {
                        $parent.animate({
                            left: '-=' + obj.container_width / obj.page_size
                        }, 1200);
                        page++
                    }
                }
            });
            $(obj.left_btn).click(function () {
                obj.leftEvt();
                if (!$parent.is(":animated")) {
                    if (page != page_count) {
                        $parent.animate({
                            left: '-=' + obj.container_width / obj.page_size
                        }, 800);
                        page++
                    } else {
                        $parent.animate({
                            left: 0
                        }, 800);
                        page = 1
                    }
                }
            })
        })
    }
})(jQuery);
(function ($) {
    var defaultVal = {
        len: 3,
        timer: 1000,
        right_btn: null,
        left_btn: null,
        rightEvt: function () { },
        leftEvt: function () { }
    };
    $.fn.imgLeftSlide = function (options) {
        var obj = $.extend(defaultVal, options);
        return this.each(function () {
            var $parent = $(this);
            var page = 1;
            if ($parent.length < obj.len) {
                $parent.append($parent.children().clone())
            }
            var img = null;
            var length = 0;
            $(obj.right_btn).click(function () {
                img = $parent.children().eq(0);
                length = img.width();
                obj.rightEvt();
                alert();
                img.animate({
                    "marginLeft": (1 * length) + "px"
                }, obj.timer, function () {
                    $(this).css("margin-left", "auto").appendTo($parent)
                })
            });
            $(obj.left_btn).click(function () {
                img = $parent.children().eq(0);
                length = img.width();
                obj.leftEvt();
                img.animate({
                    "marginLeft": (-1 * length) + "px"
                }, obj.timer, function () {
                    $(this).css("margin-left", "auto").appendTo($parent)
                })
            })
        })
    }
})(jQuery);
(function ($) {
    $.fn.adSlider = function (options) {
        var obj = $.extend($.fn.adSlider.defaultVal, options);
        return this.each(function () {
            var elem = $(this);
            var len = $(".num1 > li").length;
            var index = 0;
            var adTimer;
            $(obj.num).mouseover(function () {
                index = $(obj.num).index(this);
                showImg(elem, index)
            }).eq(0).mouseover();
            elem.hover(function () {
                clearInterval(adTimer)
            }, function () {
                adTimer = setInterval(function () {
                    showImg(elem, index);
                    index++;
                    if (index == len) {
                        index = 0
                    }
                }, 3000)
            }).trigger("mouseleave")
        });

        function showImg(elem, index) {
            var adHeight = elem.height();
            $(obj.slider).stop(true, false).animate({
                top: -adHeight * index
            }, 1000);
            $(obj.num).removeClass("on").eq(index).addClass("on")
        }
    };
    $.fn.adSlider.defaultVal = {
        slider: '.slider1',
        num: '.num1 li'
    }
})(jQuery);
(function ($) {
    $.fn.MyDiv = function (options) {
        var defaultVal = {
            url: '',
            pageIndex: 1,
            pageSize: 6,
            param: {},
            isAppend: false,
            template: null,
            onCreate: null,
            onLoad: null
        };
        var obj = $.extend(defaultVal, options);
        var bindGv = function (_self) {
            if (obj.param["pageIndex"] == null) {
                obj.param["pageIndex"] = obj.pageIndex
            }
            obj.param["pageSize"] = obj.pageSize;
            $.getJSON(obj.url, obj.param, function (data) {
                $.each(data.rows, function (k, n) {
                    var row = obj.template.clone().show();
                    _self.append(row);
                    if (obj.onCreate != null) {
                        obj.onCreate(n, row, k, data.total, obj.pageSize, obj.param["pageIndex"])
                    }
                });
                if (obj.onLoad != null) {
                    obj.onLoad(data.total, obj.pageSize, obj.param["pageIndex"])
                }
            })
        };
        return this.each(function () {
            var self = $(this);
            if (!obj.isAppend) {
                self.children().eq(0).siblings().remove()
            }
            bindGv(self)
        })
    }
})(jQuery);
(function ($) {
    var defaultVal = {
        len: 3,
        timer: 1000,
        speed: 'slow',
        easing: 'swing',
        fx: "up"
    };
    $.fn.autoSlide = function (options) {
        var obj = $.extend(defaultVal, options);
        var self = $(this);
        var init = function () {
            var handId;
            if (self.children().length < obj.len) {
                self.append(self.children().clone())
            }
            handId = setInterval(play, obj.timer);
            self.bind("mouseover", function () {
                clearInterval(handId)
            }).bind("mouseout", function () {
                handId = setInterval(play, obj.timer)
            })
        };
        var play = function () {
            var img = self.children().eq(0);
            var length = 0;
            switch (obj.fx) {
                case "left":
                    {
                        length = img.children().eq(0).width();
                        img.stop(true, false).animate({
                            "marginLeft": (-1 * length) + "px"
                        }, obj.speed, obj.easing, function () {
                            $(this).css("margin-left", "auto").appendTo(self)
                        });
                        break
                    }
                case "up":
                    {
                        length = img.height();
                        img.stop(true, false).animate({
                            "marginTop": (-1 * length) + "px"
                        }, obj.speed, obj.easing, function () {
                            $(this).css("margin-top", "auto").appendTo(self)
                        });
                        break
                    }
                default:
                    {
                        break
                    }
            }
        };
        init()
    }
})(jQuery);
(function ($) {
    $.fn.simpleTree = function (options) {

        var obj = $.extend($.fn.simpleTree.defaultVal, options);
        var count = 1;
        var addnode1 = function (pnode, pid) {
            $.getJSON(obj.url, { pid: pid }, function (data) {
                $.each(data.rows, function (i, n) {
                    var node = treenode(pnode, n);
                    var ulClass = "level0 line";
                    var switchClass = node.children('span').eq(0).attr('class');
                    if (count == 1) {
                        switchClass = switchClass.replace(artui.tree.line.POS.CENTER, artui.tree.line.POS.ROOTS);
                    }
                    if (i == data.rows.length - 1) {
                        switchClass = switchClass.replace(artui.tree.line.POS.CENTER, artui.tree.line.POS.BOTTOM);
                        ulClass = "";
                    }
                    node.children('span').eq(0).removeClass().addClass(switchClass);
                    node.children('ul').eq(0).removeClass().addClass(ulClass);
                    node.appendTo(pnode.children('ul'));
                    count = count + 1;
                });

            });
        };
        var addnode2 = function (pnode, pid) {
            $.getJSON(obj.url, { pid: pid, rd: Math.random() }, function (data) {
                recur(pnode, data.rows, pid);
                getCheckedVal();
            })

        };
        var recur = function (pnode, data, pidval) {
            var s = getArray(data, obj.pval, pidval);
            $.each(s, function (i, n) {
                var node = treenode(pnode, n);

                var ulClass = "level0 line";
                var switchClass = node.children('span').eq(0).attr('class');
                if (count == 1) {
                    switchClass = switchClass.replace(artui.tree.line.POS.CENTER, artui.tree.line.POS.ROOTS);
                }
                if (i == s.length - 1) {
                    switchClass = switchClass.replace(artui.tree.line.POS.CENTER, artui.tree.line.POS.BOTTOM);
                    ulClass = "";
                }
                node.children('span').eq(0).removeClass().addClass(switchClass);
                node.children('ul').eq(0).removeClass().addClass(ulClass);
                node.appendTo(pnode);
                count = count + 1;

                if (n.checked) {
                    onChecked(node.children('span').eq(1), true);
                }
                if (n[obj.childcount] > 0) {
                    recur(node.children('ul').eq(0), data, n[obj.val]);
                }

            });
        };
        var treenode = function (pnode, n) {
            var switchClass = "",
            folderClass = "";
            var node = $('<li class="level1"><span></span><a><span></span><span></span></a><ul></ul></li>');
            if (n[obj.childcount] > 0) {
                switchClass = obj.expanded ? artui.tree.line.OPEN : artui.tree.line.CLOSE;
                folderClass = obj.expanded ? artui.tree.folder.OPEN : artui.tree.folder.CLOSE;
            } else {
                switchClass = artui.tree.line.DOCU;
                folderClass = artui.tree.folder.DOCU;
            }
            if (obj.showCheckBox) {
                var chk = $('<span name="check_box" treenode_check=""></span>').addClass(artui.tree.checkbox.DEFAULT).bind('click',
                function () {
                    onChecked($(this), false);
                    getCheckedVal();
                });
                node.children('span').eq(0).after(chk);
            }
            node.children('span').eq(0).attr('class', switchClass).click(function () {
                onClick(node)
            });
            node.children('a').children().eq(0).attr('class', folderClass).click(function () {
                onClick(node)
            });
            node.children('a').children().eq(1).attr('class', 'node_name').attr('val', n[obj.val]).html(n[obj.text]).bind('click',
            function () {
                onFocus($(this))
            });
            node.appendTo(pnode);
            return node;
        };
        var onFocus = function (node) {
            $('.active').removeClass();
            node.attr('class', 'active');
            obj.onClick(node);
        };
        var onClick = function (node) {
            var switchClass = node.children('span').eq(0).attr('class');
            var folderClass = node.children('a').children().eq(0).attr('class');
            if (switchClass.indexOf(artui.tree.expand.OPEN) > -1) {
                switchClass = switchClass.replace(artui.tree.expand.OPEN, artui.tree.expand.CLOSE);
                folderClass = folderClass.replace(artui.tree.expand.OPEN, artui.tree.expand.CLOSE);
                node.children('ul').hide();
            } else {
                switchClass = switchClass.replace(artui.tree.expand.CLOSE, artui.tree.expand.OPEN);
                folderClass = folderClass.replace(artui.tree.expand.CLOSE, artui.tree.expand.OPEN);

                if (node.children('ul').is(':hidden')) {
                    node.children('ul').show();
                } else {
                    addnode1(node, node.children('a').children().eq(1).attr('val'));
                }

            }
            node.children('span').eq(0).removeClass().addClass(switchClass);
            node.children('a').children().eq(0).removeClass().addClass(folderClass);
        };
        var onChecked = function (self, isAuto) {
            var className = self.attr("class");
            if (className == artui.tree.checkbox.FALSE) {
                className = artui.tree.checkbox.TRUE;
                self.next().next().children().find('span[name="check_box"]').attr("class", className);
            } else {
                className = artui.tree.checkbox.FALSE;
                self.next().next().children().find('span[name="check_box"]').attr("class", className);
            }
            self.attr("class", className);

            if (!isAuto) {
                check(self);
            } else {
                setTimeout(function () {
                    check(self);
                }, 1000);
            }
        };

        var check = function (self) {
            $.each(self.parentsUntil($("ul.ztree"), 'ul'), function (i, n) {
                var chkClass1 = "";
                var lis = $(this).children('li');
                var checkedCount = 0;
                $.each(lis, function (j, k) {
                    var chkClass2 = $(this).children().eq(1).attr('class');
                    if (chkClass2 == artui.tree.checkbox.TRUE) {
                        checkedCount = checkedCount + 1;
                    }
                    if (chkClass2 == artui.tree.checkbox.PART) {
                        checkedCount = checkedCount + 0.5;
                    }
                });
                switch (checkedCount) {
                    case 0:
                        chkClass1 = artui.tree.checkbox.FALSE;
                        break;
                    case lis.length:
                        chkClass1 = artui.tree.checkbox.TRUE;
                        break;
                    default:
                        chkClass1 = artui.tree.checkbox.PART;
                        break;
                }
                $(this).prev().prev().attr('class', chkClass1);
            });


        };
        var getArray = function (packJson, field, selectVal) {
            var array = [];
            for (var i = 0; i < packJson.length; i++) {
                if (packJson[i][field] == selectVal) {
                    if (obj.selectData.indexOf(packJson[i][obj.val]) > -1) {
                        packJson[i]["checked"] = true;
                    } else {
                        packJson[i]["checked"] = false;
                    }
                    array.push(packJson[i]);
                }
            }
            return array;
        };

        var getCheckedVal = function () {
            var result = [];
            $('span[name="check_box"]').each(function () {
                if ($(this).attr("class") == artui.tree.checkbox.TRUE) {
                    if ($(this).next().children().eq(0).attr("class") == artui.tree.folder.DOCU) {
                        result.push($(this).next().children().eq(1));
                    }
                }
            });
            obj.onChecked(result);
        };
        return this.each(function () {
            var elem = $('<ul class="ztree" style="-moz-user-select: none;"></ul>');
            if (!obj.expanded) {
                addnode1(elem, obj.pid);
            } else {
                addnode2(elem, obj.pid);
            }
            $(this).html(elem);
        })
    };

    $.fn.simpleTree.defaultVal = {
        url: null,
        pid: '',
        ptext: 'root',
        childcount: '',
        val: '',
        text: '',
        pval: 'pid',
        selectData: ["22", "23", "24", "25"],
        expanded: false,
        showCheckBox: true,
        onClick: function (node) {
            alert($(node).attr("val"));
        },
        onChecked: function (nodes) {
        },
        onCreate: function (node, n) { }
    };
})(jQuery);
(function ($) {
    $.fn.combotree = function (options) {
        var self = this;
        var defaultVal = {
            url: '',
            pid: '0',
            ptext: '类别',
            childcount: 'child_count',
            val: 'id',
            text: 'name',
            showCheckBox: true,
            expanded: false,
            width: 210,
            treeWidth: 210,
            onClick: function (node) {
                self.children().eq(0).val($(node).attr("val"));
                self.children().eq(1).val($(node).html());
                hideCombox();
            },
            onChecked: function (nodes) {
                var txt = "";
                val = "";
                $.each(nodes, function (i, n) {
                    val += $(this).attr("val") + ",";
                    txt += $(this).html() + ",";
                });
                if (val != "") {
                    val = val.substring(0, val.length - 1);
                    txt = txt.substring(0, txt.length - 1);
                }
                self.children().eq(0).val(val);
                self.children().eq(1).val(txt);
            }

        };

        var obj = $.extend(true, defaultVal, options);

        var wrapHtml = "<div class='model-select-box'  style='float: left;width:" + obj.width + "px;'></div>";
        var txtHtml = " <input class='model-select-text' readonly='' style='width:" + (obj.width - 15) + "px;' type='text' data-value=''></input>";
        var baseHtml = "<div class='cxcalendar'></div>";
        var lockHtml = "<div class='cxcalendar_lock'></div>";
        var $wrapHtml = $(wrapHtml);
        var $txtHtml = $(txtHtml);
        var $baseHtml = $(baseHtml);
        var $lockHtml = $(lockHtml);
        var init = function () {
            if (obj.url != "") {
                var ul = $('<div id="tree" style="height: 200px;overflow: auto;"></div>').simpleTree(obj);
                ul.appendTo($baseHtml);
            }
            $baseHtml.appendTo("body");
            $lockHtml.appendTo("body");

            self.unbind('click').bind('click', function () {
                showCombox();
            });
            $lockHtml.unbind('click').bind('click', function () {
                hideCombox();
            });
        };

        var showCombox = function () {
            pane_top = self.offset().top,
                pane_left = self.offset().left,
                obj_w = self.outerWidth(),
                obj_h = self.outerHeight();
            pane_top = pane_top + obj_h;
            $baseHtml.css({
                "width": obj.treeWidth,
                "top": pane_top,
                "left": pane_left
            }).show();
            $lockHtml.css({
                "width": "1000",
                "height": "1000"
            }).show();
        };

        var hideCombox = function () {
            $baseHtml.hide();
            $lockHtml.hide();
        };

        return this.each(function () {
            $(this).hide().wrap(wrapHtml).after($txtHtml);
            self = $(this).parent('div');
            init();
        });
    }

})(jQuery);
(function ($) {
    var easypop = function (elem) {
        this.elem = elem;
        this.$elem = $(elem);
        this.container = null,
        this.pop = null
    };
    easypop.defaults = {
        id: "dialog",
        message: "hello word",
        template: null,
        height: 400,
        width: 400,
        isShowHeader: true,
        isMask: true,
        num: 1,
        title: "标题",
        src: "",
        callback: null,
        onClose: null,
        btnbar: null
    };
    var create = function (sets) {
        var mask = $('<div></div>');
        if (sets.isMask) {
            mask.addClass(artui.artpop.pb_mask).appendTo(document.body);
            mask.css("opacity", 0.5);
            mask.css("z-index", (sets.num * 2 - 1) + 1000);
            mask.css("height", $(document).height());
            mask.css("width", $(document).width());
        }

        var dialog = $('<div  name="pb"></div>').addClass(artui.artpop.pb).appendTo(document.body);
        var height = sets.height;
        dialog.css({
            "z-index": (sets.num * 2) + 1000
        });

        var header = $('<div></div>').addClass(artui.artpop.pb_hd).appendTo(dialog);
        header.mousedown(function (event) {
            header.css("cursor", "pointer");
            var isMove = true;
            var abs_x = event.pageX - dialog.offset().left;
            var abs_y = event.pageY - dialog.offset().top;
            $(document).mousemove(function (event) {
                var dwidth = $(window).width();
                if (isMove) {
                    var obj = dialog;
                    obj.css({
                        'left': event.pageX - abs_x > dwidth - obj.width() ? dwidth - obj.width() : (event.pageX - abs_x < 0 ? 0 : event.pageX - abs_x),
                        'top': event.pageY - abs_y < 0 ? 0 : event.pageY - abs_y
                    })
                }
            }).mouseup(function () {
                isMove = false
            })
        });
        var title = $('<span></span>').appendTo(header);
        title.addClass(artui.artpop.pb_t).text(sets.title);

        var headerclose = $('<button name="close" title="Close" type="button"><span class="ui-button-icon-primary ui-icon ui-icon-closethick"></span></button>').addClass(artui.artpop.pb_x).appendTo(header);
        headerclose.click(function () {
            if (easypop.container != null) {
                sets.template.appendTo(easypop.container);
                easypop.container = null;
            }
            if (sets.onClose != null) {
                sets.onClose();
            }
            mask.remove();
            dialog.remove();
        });

        if (!sets.isShowHeader) {
            header.hide();
        }
        if (sets.template != null && sets.template != "") {
            sets.template.appendTo(dialog)
        }
        if (sets.btnbar != null) {
            $.each(sets.btnbar, function (i, n) {
                dialog.find(n.self).click(function () {
                    if (sets.onClose != null) {
                        sets.onClose();
                    }
                    n.elemevent();
                    mask.remove();
                    dialog.remove()
                })
            })
        }

        return dialog
    };
    var show = function (pop) {
        var scrollHeight = $(document).scrollTop();
        var top = $(window).height();
        var left = $(window).width();
        pop.css({
            "left": (left - pop.width()) / 2,
            "top": 0,
            'opacity': 0,
            'visibility': 'visible'
        });
        pop.delay(300 / 2).animate({
            "top": (top - pop.height() + scrollHeight) / 2,
            "opacity": 1
        }, 300, function () { })
    };
    var closePop = function (self, obj, isRefresh, param) {
        if (isRefresh) {
            if (obj.callback != null) {
                obj.callback(param);
            }
            self.find('button[name="close"]').click();
        } else {
            self.find('button[name="close"]').click();
        }
    };
    easypop.prototype = {
        init: function (options) {
            var obj = $.extend(false, easypop.defaults, options);
            var data = $(this).data(obj.id);
            if (data) {
                obj = $.extend(data.options, options);
            }
            $(this).data(obj.id, {
                options: obj
            });
            this.pop = create(obj);
            this.pop.append(obj.template);
            this.pop.find('div[name="pb_ct"]').css({
                width: obj.width,
                height: obj.height
            });
            show(this.pop);
        },
        dialog: function (options) {
            var obj = $.extend(false, easypop.defaults, options);
            if (obj.src != "") {
                obj.template = $('<div class="' + artui.artpop.pb_bd + '"></div>');
                var iframe = $('<iframe class="pb_iframe" scrolling="no" frameborder="0"  ></iframe>').appendTo(obj.template);
                var iframeWidth = obj.width;
                iframe.attr({
                    "width": iframeWidth + "px",
                    "height": obj.height + "px",
                    "src": obj.src
                });
            } else {
                if (easypop.container == null) {
                    obj.template = obj.template != null ? obj.template : (this).show();
                    easypop.container = $("<div><div>").insertBefore(obj.template).hide();
                } else {
                    obj.template = easypop.container.children();
                }
            }
            this.pop = create(obj);
            this.pop.data(obj.id, {
                options: obj
            });
            show(this.pop);
            return this.pop;
        },
        close: function (isRefresh, param) {
            var obj = $(this).data(easypop.defaults.id)['options'];
            if (isRefresh == null) {
                isRefresh = false;
            }
            closePop($(this), obj, isRefresh, param);
        }
    };
    $.fn.easypop = function (fun) {
        var $this = $(this);
        var methods = new easypop($this);
        if (methods[fun]) {
            return methods[fun].apply(this, Array.prototype.slice.call(arguments, 1))
        } else if (typeof (fun) == 'object' || !fun) {
            return methods.init(fun)
        }
    };
    window.easypop = $(window).easypop = $.easypop = easypop;
    $.easypop.alert = function (content, callback, options) {
        var cont = wrapCont(content);
        var temp = $('<div class="' + artui.artpop.pb_bd + '"></div>').html('<div name="pb_ct" class="' + artui.artpop.pb_ct + '">' + cont + '</div><div class="' + artui.artpop.pb_ft + '"><a id="btnPbOK" class="' + artui.artpop.pb_ok + '">确定</a></div>');
        var btnbar = [{
            self: '#btnPbOK',
            elemevent: callback,
            isclose: true
        }];

        var obj = $.extend(false, {
            message: "hello word",
            height: 50,
            width: 349,
            title: "提示",
            template: temp,
            btnbar: btnbar
        }, options);
        return $(window).easypop(obj);
    };
    $.easypop.confirm = function (content, ok, cancel, options) {
        var cont = wrapCont(content);
        var temp = $('<div class="' + artui.artpop.pb_bd + '"></div>').html('<div name="pb_ct" class="' + artui.artpop.pb_ct + '">' + cont + '</div><div class="' + artui.artpop.pb_ft + '"><div class="ui-dialog-buttonset"><button id="btnPbOK" type="button" class="' + artui.artpop.pb_cl + '">确定</button><button id="btnPbClose"type="button" class="' + artui.artpop.pb_ok + '">取消</button></div></div>');
        var btnbar = [{
            self: '#btnPbOK',
            elemevent: ok,
            isclose: true
        }, {
            self: '#btnPbClose',
            elemevent: cancel,
            isclose: true
        }];

        var obj = $.extend(false, {
            title: "确认",
            message: "hello word",
            height: 50,
            width: 349,
            template: temp,
            callback: null,
            btnbar: btnbar
        }, options);
        return $(window).easypop(obj);
    };

    function wrapCont(cont) {
        return '<div style="text-align: center;padding: 0px 0px 20px;font-size: 16px;">' + cont + '</div>'
    }
})(jQuery);
(function ($) {
    var Toast = function (elem) {
        this.elem = elem
    };
    Toast.defaultVal = {
        timeout: 50000,
        msg: "helloword",
        wrapClass: "ui-tips-wrap"
    };
    $.fn.Toast = function (options) {
        var obj = $.extend(Toast.defaultVal, options);
        var toast = $('<div style="display: none; opacity: 0;"></div>').addClass(artui.toast.style).appendTo(document.body);
        var toastTime = null;
        var displayTime = null;
        var wrapCont = function (cont) {
            return '<div class="' + obj.wrapClass + '">' + cont + '</div>'
        };
        var setToast = function () {
            if (toastTime != null) {
                clearTimeout(toastTime);
                clearTimeout(displayTime)
            }
            toast.css('display', 'block');
            toast.css('opacity', 1);
            toast.html(wrapCont(obj.msg));
            toastTime = setTimeout(function () {
                toast.css('opacity', 0);
                displayTime = setTimeout(function () {
                    toast.remove()
                }, obj.timeout)
            }, obj.timeout)
        };
        return this.each(function () {
            setToast()
        })
    };
    window.Toast = $(window).Toast = $.Toast = Toast;
    $.Toast.show = function (txt) {
        return $(window).Toast({
            timeout: 2000,
            msg: txt,
            wrapClass: ""
        })
    };

    $.Toast.error = function (txt) {
        return $(window).Toast({
            timeout: 2000,
            msg: txt,
            wrapClass: "ui-tips-wrap wrap-error"
        })
    };

    $.Toast.warning = function (txt) {
        return $(window).Toast({
            timeout: 2000,
            msg: txt,
            wrapClass: "ui-tips-wrap wrap-warning"
        })
    };
    $.Toast.success = function (txt) {
        return $(window).Toast({
            timeout: 2000,
            msg: txt,
            wrapClass: "ui-tips-wrap wrap-ok"
        })
    };

})(jQuery);
(function ($) {
    $.fn.createhftable = function (options) {
        var defaultVal = {
            fixHeader: true,
            width: '100%',
            height: '200px'
        };
        var obj = $.extend(defaultVal, options);
        var templateHead = '<div class="table-head"><div class="table-head-wrap"></div></div>';
        var templateContent = '<div class="table-content"></div>';

        var formatTb = function (self) {
            var outTb = self.clone().html('');
            var thead = self.find("thead").clone();
            var tbody = self.find("tbody").clone();
            var colgroup = getColgroup(thead);
            var theadTb = $('<table id="fixed-table"></table>').attr('class', self.attr('class')).append(colgroup).append(thead);
            var tbodyTb = outTb.append(colgroup.clone()).append(tbody);
            var divHead = $(templateHead);
            divHead.find('.table-head-wrap').append(theadTb);
            var divContent = $(templateContent);
            divContent.css('height', obj.height).append(tbodyTb);
            self.wrap('<div class="table"></div>');
            self.before(divHead);
            self.before(divContent);
            self.remove();
            return tbodyTb;
        };
        function getColgroup(head) {
            var colgroup = $('<colgroup></colgroup>');
            var tr = head.find('tr:first');
            var lastNum = tr.find('th:last').index();
            for (var i = 0; i <= lastNum ; i++) {
                var col = $('<col>');
                if (tr.find('th').eq(i).width() > 0) {
                    col.css('width', tr.find('th').eq(i).width());
                }
                col.appendTo(colgroup);
            }
            return colgroup;
        }
        return this.each(function () {
            var self = $(this);
            formatTb(self);
        });
    }
})(jQuery);

(function ($) {
    var bindgv = function (elem, obj) {
        var contid = elem.parent().attr("id");
        if (obj.fixHeader.isFix) {

            if (elem.parent().find('thead').length == 1) {
                $('#' + contid).createhftable({ height: obj.fixHeader.height });
            }
            var opts = {
                loading: function (tbody) {

                    var isScroll = true;
                    var h = tbody.height(), w = tbody.width();
                    if (tbody.height() <= obj.fixHeader.height) {
                        tbody.parent().parent().prev().css("padding-right", "0px");
                        tbody.parent().attr("resize", "0");
                        isScroll = false;
                    }

                    var table1 = $('#fixed-table thead');
                    table1.dragtable({
                        cont: $('.table'),
                        relation: tbody,
                        isScroll: isScroll
                    });

                    if (tbody.parent().parent().parent().find('div[name="loading"]').length == 0) {
                        tbody.parent().parent().parent().append('<div name="loading" class="loading" />');
                    }

                    if (tbody.parent().attr("resize") != "1") {

                        table1.children('tr').children('th').on("click", function () {
                            var i = $(this).index();
                            var asc = "1";
                            var tdname = elem.children('tr').children('td').eq(i).attr("name");

                            if (obj.allowSort.indexOf(tdname) > -1) {
                                if ($(this).children("div").find("span").length == 0) {
                                    $(this).children("div").append("<span style='font-size: 12px;margin-left: 4px;'>▽</span>");
                                } else {
                                    var span = $(this).find("span").text();
                                    alert(span);
                                    switch (span) {
                                        case "△":
                                            asc = "1";
                                            break;
                                        case "▽":
                                            asc = "2";
                                            break;
                                        default:
                                            asc = "▽";
                                            break;
                                    }
                                    $(this).children("div").find("span").html(span == "▽" ? "△" : "▽");
                                }
                                obj.param = $.extend(obj.param, { "sort": tdname, "asc": asc, "rd": Math.random() });
                                setTimeout(function () {
                                    tbody.mytable("reload", obj);
                                }, 500);
                            }

                            $(this).siblings().find('span').remove();
                        });
                        tbody.parent().attr("resize", "1");
                    }
                    tbody.parent().parent().parent().find('div[name="loading"]').remove();
                }
            };

            obj = $.extend(obj, opts);
            $('#' + contid + ' tbody').mytable1(obj);

        } else {
            $('#' + contid + ' tbody').mytable1(obj);
        }
    };


    $.fn.mytable = function (options) {
        if (typeof options == 'object') {
            return this.each(function () {
                var elem = $(this);
                var obj = $.extend($.fn.mytable.defaultVal, options);
                bindgv(elem, obj);
            })
        } else {
            return $(this).mytable1(options);
        }
    };

    $.fn.mytable.defaultVal = {
        url: '/Dept/DepJson1',
        param: null,
        keyval: 'ApplicationID',
        fields: null,
        fixHeader: { isFix: true, height: artui.table.height },
        allowSort: ["PlatformUserTotalPoint", "PlatformUserRegisterTime"],
        pagesize: 2,
        total: 6,
        pageindex: 1,
        container: null,
        hoverclass: '',
        selectclass: 'ui-state-hover',
        pager: function () { },
        onCreate: null
    }
})(jQuery);

(function ($) {

    var bindgv = function (elem, obj) {

        var pageurl = obj.url + "?pagesize=" + obj.pagesize + "&page=" + obj.pageindex;
        elem.children().eq(0).hide();
        elem.children().eq(0).siblings().remove();
        $.getJSON(pageurl, obj.param, function (data) {
            $.fn.mytable1.defaultVal.total = data.total;
            obj.total = data.total;
            $.each(data.rows, function (k, n) {
                var row = elem.children().eq(0).clone().show();
                var td = null;
                var count = row.children().length;
                for (var i = 0; i < count; i++) {
                    td = row.children().eq(i);
                    if (td.attr("name").toString() == obj.keyval) {
                        td.children().val(n[td.attr("name").toString()])
                    } else {
                        td.text(n[td.attr("name").toString()])
                    }
                }

                row.hover(function () {
                    $(this).addClass(obj.hoverclass)
                }, function () {
                    $(this).removeClass(obj.hoverclass)
                });

                row.click(function () {
                    $(this).addClass(obj.selectclass).siblings().removeClass(obj.selectclass);
                });

                elem.append(row);
                if (obj.onCreate != null) {
                    obj.onCreate(n, row, data)
                }
            });
            if (obj.container != null) {
                $(obj.container).myPager({
                    total: obj.total,
                    pageSize: obj.pagesize,
                    onSelectPage: function (pageIndex1) {
                        elem.mytable1({
                            pageindex: pageIndex1,
                            container: null
                        })
                    }
                })
            }

            if (obj.loading != null) {
                obj.loading(elem);
            }

            if (obj.pager != null) {
                obj.pager(elem, data);
            }
        })
    };
    var methods = {
        init: function (options) {

            return this.each(function () {
                var elem = $(this);
                var obj = $.extend(false, $.fn.mytable1.defaultVal, options);
                var data = $(this).data(elem.context.parentNode.id);
                if (data) {
                    obj = $.extend(data.options, options)
                }
                $(this).data(elem.context.parentNode.id, {
                    options: obj
                });
                var tb = bindgv(elem, obj);

            })
        },
        reload: function (options) {
            return this.each(function () {
                var elem = $(this);
                var obj = $(this).data(elem.context.parentNode.id)['options'];
                if (options != null) {
                    obj = $.extend(obj, options);
                }

                bindgv(elem, obj)
            })
        }
    };
    $.fn.mytable1 = function (options) {
        if (methods[options]) {
            return methods[options].apply(this, Array.prototype.slice.call(arguments, 1))
        } else if (typeof this == 'object' || !options) {
            return methods.init.apply(this, arguments)
        } else {
            return methods.init.apply(this, {})
        }
    };
    $.fn.mytable1.defaultVal = {
        url: '/Dept/DepJson1',
        param: null,
        keyval: 'ApplicationID',
        fields: null,
        pagesize: 2,
        total: 6,
        pageindex: 1,
        container: null,
        fixHeader: { isFix: false, height: '80' },
        hoverclass: 'ui-state-hover',
        selectclass: 'ui-state-active',
        loading: function () { },
        pager: function () { },
        onCreate: null
    }
})(jQuery);


(function ($) {
    var rules = {
        txt: function (v) {
            var elem = $('<input type="text"/>').val(v);
            elem.attr("style", "border:0px solid #fff;background:url(0) no-repeat;");
            elem.click(function () {
                elem.attr("style", 'border:1px solid #aaa');
                elem.select()
            });
            elem.blur(function () {
                elem.attr("style", "border:0px solid #fff;background:url(0) no-repeat;")
            });
            return elem
        }
    };
    var bindgv = function (elem, obj) {
        var pageurl = obj.url + "?pagesize=" + obj.pagesize + "&page=" + obj.pageindex;
        elem.children().eq(0).hide();
        elem.children().eq(0).siblings().remove();
        var row = elem.children().eq(0).clone().show();
        if (obj.data != null) {
            if (obj.data.rows != null) {
                bindrow(elem, obj.data, obj)
            } else {
                elem.append(row);
                if (obj.onCreate != null) {
                    obj.onCreate(null, row, obj.data);
                }
            }

        } else {
            var result = $.getJSON(pageurl, obj.param, function (data) {
                if (data != null) {
                    bindrow(elem, data, obj)
                } else {
                    elem.children().eq(0).show();
                    if (obj.onCreate != null) {
                        elem.append(row);
                        obj.onCreate(null, row)
                    }
                }
            })
        }
    };
    var bindrow = function (elem, data, obj) {
        $.fn.editable.defaultVal.total = data.total;
        obj.total = data.total;
        $.each(data.rows, function (k, n) {
            var td = null;
            var row = elem.children().eq(0).clone().show();
            var count = row.children().length;
            for (var i = 0; i < count; i++) {
                td = row.children().eq(i);
                if (td.attr("name").toString() == obj.keyval) {
                    td.children().val(n[td.attr("name").toString()])
                } else {
                    td.children().val(n[td.attr("name").toString()])
                }
            }
            row.dblclick(function () { });
            elem.append(row);
            if (obj.onCreate != null) {
                obj.onCreate(n, row, data)
            }
        })
    };
    var addrow = function (self, obj) {

        var row = self.parent().children().eq(0).clone().show();
        var td = null;
        if (obj.onCreate != null) {
            obj.onCreate(null, row)
        }
        row.dblclick(function () { });
        row.attr('name', 'lastrow');
        self.removeAttr('name').parent().append(row)
    };
    var up = function (self, obj) {
        var prev = self.prev();
        if (prev.length != 0) {
            self.insertBefore(prev)
        }
    };
    var down = function (self, obj) {
        var next = self.next();
        if (next.length != 0) {
            self.insertAfter(next)
        }
    };
    var methods = {
        init: function (options) {
            return this.each(function () {
                var elem = $(this);
                var obj = $.extend(false, $.fn.editable.defaultVal, options);
                var data = $(this).data(elem.context.parentNode.id);
                if (data) {
                    obj = $.extend(data.options, options)
                }
                $(this).data(elem.context.parentNode.id, {
                    options: obj
                });
                bindgv(elem, obj)
            })
        },
        reload: function () {
            return this.each(function () {
                var elem = $(this);
                var obj = $(this).data(elem.context.parentNode.id)['options'];
                bindgv(elem, obj)
            })
        },
        addrow: function (row) {
            return this.each(function () {
                var elem = $(this);
                var obj = $(this).data(elem.context.parentNode.id)['options'];
                addrow(row, obj)
            })
        },
        up: function (row) {
            return this.each(function () {
                var elem = $(this);
                var obj = $(this).data(elem.context.parentNode.id)['options'];
                up(row, obj)
            })
        },
        down: function (row) {
            return this.each(function () {
                var elem = $(this);
                var obj = $(this).data(elem.context.parentNode.id)['options'];
                down(row, obj)
            })
        }
    };
    $.fn.editable = function (options) {
        if (methods[options]) {
            return methods[options].apply(this, Array.prototype.slice.call(arguments, 1))
        } else if (typeof this == 'object' || !options) {
            return methods.init.apply(this, arguments)
        } else {
            return methods.init.apply(this, {})
        }
    };
    $.fn.editable.defaultVal = {
        url: '/Dept/DepJson1',
        param: null,
        data: null,
        keyval: 'ApplicationID',
        fields: null,
        pagesize: 2,
        total: 6,
        pageindex: 1,
        hoverclass: 'ui-state-hover',
        pager: function () { },
        onCreate: null
    }
})(jQuery);
(function ($) {
    $.fn.myPager = function (options) {
        var defaultVal = {
            pageIndex: 1,
            pageSize: 2,
            total: 50,
            shownum: 10,
            firstClass: '.prev',
            numClass: '.num',
            lastClass: '.next',
            currClass: '.current',
            onSelectPage: null
        };
        var obj = $.extend(defaultVal, options);
        var create = function () {
            var begIndex = 1;
            var endIndex = 1;
            var pagecount = Math.ceil(obj.total / obj.pageSize);
            if (obj.pageIndex - obj.shownum / 2 < 0) {
                begIndex = 1;
                endIndex = obj.shownum
            } else {
                begIndex = obj.pageIndex - obj.shownum / 2 + 1 <= 0 ? obj.pageIndex : obj.pageIndex - Math.ceil(obj.shownum / 2) + 1;
                endIndex = obj.pageIndex + obj.shownum / 2 > pagecount ? pagecount : obj.pageIndex + Math.ceil(obj.shownum / 2)
            }
            var pagetxt = '<input name="pageNum" type="text" style="width:20px;" value="' + obj.pageIndex + '" />';
            var html = '<div  class="ui-pager ui-state-highlight ui-corner-all" style="margin-top:1px; height:35px;"><span>总记录：' + obj.total + ' 　 页码：' + pagetxt + '/' + pagecount
                + '  每页：' + obj.pageSize + '</span><div name="Pagination" class="pagination">';
            if (obj.pageIndex > 1) {
                html += '<a class="prev" href="#">前</a>';
            }
            for (var i = begIndex; i <= endIndex; i++) {
                if (obj.pageIndex == i) {
                    html += '<span class="current">' + i + '</span>'
                } else if (i > 0 && i <= pagecount) {
                    html += '<a  class="num" href="#">' + i + '</a>'
                }
            }
            if (obj.pageIndex < pagecount) {
                html += '<a class="next" href="#">后</a></div><div>'
            }
            elem.append(html);
            elem.find(obj.firstClass).click(function () {
                obj.pageIndex = parseInt(elem.find(obj.currClass).html()) - 1;
                obj.pageIndex = obj.pageIndex < 1 ? 1 : obj.pageIndex;
                elem.empty();
                create();
                if (obj.onSelectPage != null) {
                    obj.onSelectPage(obj.pageIndex)
                }
            });
            elem.find(obj.numClass).click(function () {
                obj.pageIndex = parseInt($(this).text());
                elem.empty();
                create();
                if (obj.onSelectPage != null) {
                    obj.onSelectPage(obj.pageIndex)
                }
            });
            elem.find(obj.lastClass).click(function () {
                obj.pageIndex = parseInt(elem.find(obj.currClass).html()) + 1;
                obj.pageIndex = obj.pageIndex > pagecount ? pagecount : obj.pageIndex;
                elem.empty();
                create();
                if (obj.onSelectPage != null) {
                    obj.onSelectPage(obj.pageIndex)
                }
            });
            elem.find('input[name="pageNum"]').keypress(function (e) {
                if (e.which == 13) {
                    var selfVal = $(this).val();
                    if (new RegExp('[0-9]|[1-9][0-9]{1,5}').test(selfVal)) {
                        obj.pageIndex = parseInt(selfVal);
                        obj.pageIndex = obj.pageIndex > pagecount ? pagecount : obj.pageIndex;
                        elem.empty();
                        create();
                        if (obj.onSelectPage != null) {
                            obj.onSelectPage(obj.pageIndex);
                        }
                    }
                }
            });
        };
        var elem = null;
        return this.each(function () {
            elem = $(this);
            elem.empty();
            create()
        })
    }
})(jQuery);
(function ($) {
    var defalutVal = {
        disabled: null,
        height: null,
        total: 10,
        pageSize: 2,
        pageNumber: 1,
        pageList: [10, 20, 30, 50],
        loading: false,
        buttons: null,
        showPageList: true,
        showRefresh: true,
        onSelectPage: null,
        onBeforeRefresh: null,
        onRefresh: null,
        onChangePageSize: null,
        beforePageText: "第",
        afterPageText: "页/共{pages}页",
        displayMsg: "显示{from}到{to}/共{total}记录"
    };
    $.fn.pager = function (options) {
        var obj = $.extend(defalutVal, options);
        var create = function () {
            elem.empty();
            elem.addClass("pagination");
            var _dstr = [];
            _dstr.push('<div class="pagination-messages"></div>');
            _dstr.push('<table class="pagination-table"><tr>');
            _dstr.push('<td><select class="pagination-page-list"></select></td>');
            _dstr.push('<td name="page-list-separtor"><span class="pagination-btn-separator"></span></td>');
            _dstr.push('<td><a href="javascript:void(0)" icon="pagination-first" title="首页"></a></td>');
            _dstr.push('<td><a href="javascript:void(0)" icon="pagination-prev" title="前一页"></a></td>');
            _dstr.push('<td><span class="pagination-btn-separator"></span></td>');
            _dstr.push('<td><span class="pagination-beforePageText"></span></td>');
            _dstr.push('<td><input class="pagination-num" type="text" value="0" size="2"></td>');
            _dstr.push('<td><span class="pagination-afterPageText"></span></td>');
            _dstr.push('<td><span class="pagination-btn-separator"></span></td>');
            _dstr.push('<td><a href="javascript:void(0)" icon="pagination-next" title="后一页"></a></td>');
            _dstr.push('<td><a href="javascript:void(0)" icon="pagination-last" title="末页"></a></td>');
            _dstr.push('<td name="load-separtor"><span class="pagination-btn-separator"></span></td>');
            _dstr.push('<td name="load_button"><a href="javascript:void(0)" icon="pagination-load" title="刷新"></a></td>');
            _dstr.push('</tr></table>');
            $(_dstr.join('')).appendTo(elem);
            elem.find("a").linkbutton()
        };
        var reCreate = function () {
            var pageList = elem.find(".pagination-page-list");
            var pageListSepartor = elem.find("[name=page-list-separtor]");
            pageList.empty();
            pageList.parent().css("display", "inline-block");
            pageListSepartor.css("display", "inline-block");
            for (var i = 0; i < obj.pageList.length; i++) {
                var option = $("<option></option>").text(obj.pageList[i]).appendTo(pageList);
                if (obj.pageList[i] == obj.pageSize) option.attr("selected", "selected")
            }
        };
        var bindEvt = function () {
            elem.find('a[icon=pagination-first]').bind('click', function () {
                var pName = 1;
                obj.pageNumber = pName;
                if (obj.onSelectPage) {
                    obj.onSelectPage(obj.pageNumber, obj.pageSize)
                }
            });
            elem.find('a[icon=pagination-prev]').bind('click', function () {
                var pName = 1;
                if (obj.pageNumber > pName) {
                    obj.pageNumber--;
                    if (obj.onSelectPage) {
                        obj.onSelectPage(obj.pageNumber, obj.pageSize)
                    }
                    resetPagination()
                } else { }
            });
            elem.find('a[icon=pagination-next]').bind('click', function () {
                var pNum = Math.ceil(obj.total / obj.pageSize);
                if (obj.pageNumber < pNum) {
                    obj.pageNumber++;
                    if (obj.onSelectPage) {
                        obj.onSelectPage(obj.pageNumber, obj.pageSize)
                    }
                    resetPagination()
                }
            });
            elem.find('a[icon=pagination-last]').bind('click', function () {
                var pNum = Math.ceil(obj.total / obj.pageSize);
                obj.pageNumber = pNum;
                if (obj.onSelectPage) {
                    obj.onSelectPage(obj.pageNumber, obj.pageSize)
                }
            })
        };
        var resetPagination = function () {
            var displayMsg = obj.displayMsg;
            displayMsg = displayMsg.replace(/{from}/, Math.min(obj.pageSize * (obj.pageNumber - 1) + 1, obj.total));
            displayMsg = displayMsg.replace(/{to}/, Math.min(obj.pageSize * (obj.pageNumber), obj.total));
            displayMsg = displayMsg.replace(/{total}/, obj.total);
            elem.find(".pagination-messages").html(displayMsg)
        };
        var isLoaded = function (loading) {
            if (loading) elem.find("a[icon=pagination-load]").find(".pagination-load").addClass("pagination-loading");
            else elem.find("a[icon=pagination-load]").find(".pagination-load").removeClass("pagination-loading")
        };
        var elem = null;
        return this.each(function () {
            elem = $(this);
            create();
            reCreate();
            bindEvt();
            resetPagination()
        })
    }
})(jQuery);
(function ($) {
    $.fn.tree1 = function (options) {
        var defaultVal = {
            url: null,
            pid: '',
            ptext: '部门列表',
            pval: 'G_ParentID',
            childcount: '',
            val: '',
            text: '',
            selectData: [],
            expanded: false,
            showCheckBox: false,
            onClick: function (node, n) {
                alert($(node).attr("val"))
            },
            onCreate: function (node, n) { }
        };
        var obj = $.extend(defaultVal, options);
        var self = $(this);

        function getJson(packJson, field, selectVal) {
            var array = [];
            for (var i = 0; i < packJson.length; i++) {
                if (packJson[i][field] == selectVal) {
                    array.push(packJson[i])
                }
            }
            return array
        };
        var addnode1 = function (pnode, pid) {
            $.getJSON(obj.url, {
                pid: pid,
                rd: Math.random()
            }, function (data) {
                var ul = $('<ul></ul>');
                ul.appendTo(pnode);
                $.each(data.rows, function (i, n) {
                    var node = treenode(ul, n);
                    if (i == data.rows.length - 1) {
                        var className = node[0].className;
                        switch (className) {
                            case "folder-close":
                                node[0].className = 'folder-close-last';
                                break;
                            case "doc":
                                node[0].className = 'doc-last';
                                break;
                            default:
                                node[0].className = '';
                                break
                        }
                    }
                })
            })
        };
        var addnode2 = function (pnode, pid) {
            $.getJSON(obj.url, {
                pid: pid,
                rd: Math.random()
            }, function (data) {
                recur(pnode, data.rows, 0)
            })
        };
        var recur = function (pnode, data, pidval) {
            var s = getJson(data, obj.pval, pidval);
            var ul = $('<ul></ul>');
            ul.appendTo(pnode);
            $.each(s, function (i, n) {
                var node = treenode(ul, n);
                if (n[obj.childcount] > 0) {
                    recur(node, data, n[obj.val])
                }
                if (i == s.length - 1) {
                    var className = node[0].className;
                    switch (className) {
                        case "folder-open":
                            node[0].className = 'folder-open-last';
                            break;
                        case "doc":
                            node[0].className = 'doc-last';
                            break;
                        default:
                            node[0].className = '';
                            break
                    }
                }
            })
        };
        var treenode = function (pnode, n) {
            var node = $('<li></li>');
            var span = null;
            if (obj.showCheckBox) {
                span = $('<span name="checkbox"></span>').attr('class', 'tree-checkbox0').attr('id', n[obj.val]);
                span.attr('data-child', n[obj.childcount]).attr('val', 0).bind('click', function () {
                    onChecked($(this))
                });
                node.prepend(span)
            }
            if (n[obj.childcount] > 0) {
                if (!obj.expanded) {
                    node.attr('class', 'folder-close')
                } else {
                    node.attr('class', 'folder-open')
                }
                node.append($('<span name="sptext"></span>').attr('val', n[obj.val]).html(n[obj.text]).css('cursor', 'pointer').bind('click', function () {
                    docfocus($(this), n)
                }));
                node.prepend('<img class="trigger" src="/images/spacer.gif" border=0>');
                node.children().eq(0).click(function () {
                    folderevent(node)
                })
            } else {
                node.attr('class', 'doc');
                node.append($('<span name="sptext"></span>').attr('val', n[obj.val]).html(n[obj.text]).css('cursor', 'pointer').bind('click', function () {
                    docfocus($(this), n)
                }))
            }
            obj.onCreate(node, n);
            pnode.append('<li class="line"> </li>');
            node.appendTo(pnode);
            return node
        };
        var folderevent = function (node) {
            var className = node.attr('class');
            if (className == 'folder-open' || className == 'folder-open-last') {
                className = className.replace('open', 'close');
                node.children('ul').hide()
            } else {
                className = className.replace('close', 'open');
                if (node.children('ul').is(':hidden')) {
                    node.children('ul').show()
                } else {
                    addnode1(node, node.children('span[name=sptext]').attr('val'))
                }
            }
            node.removeClass().addClass(className)
        };
        var docfocus = function (node, n) {
            $('.active').removeClass();
            node.attr('class', 'active');
            obj.onClick(node, n)
        };
        var onChecked = function (self) {
            var flag = 1;
            var className = self.attr("class");
            if (className.indexOf('tree-checkbox0') > -1) {
                self.parent().find('span[name=checkbox]').attr('class', 'tree-checkbox1')
            } else {
                self.parent().find('span[name=checkbox]').attr('class', 'tree-checkbox0');
                flag = -1
            }
            check(self, flag)
        };
        var check = function (self, flag) {
            $.each(self.parent().parents(), function (i, n) {
                var span = $(this).children('span[name=checkbox]');
                var v = parseInt(span.attr('val')),
                    childcount = parseInt(span.attr('data-child'));
                if ((v + flag) == childcount) {
                    span.attr('class', 'tree-checkbox1')
                } else {
                    span.attr('class', 'tree-checkbox2')
                } if ((v + flag) == 0) {
                    span.attr('class', 'tree-checkbox0')
                }
                span.attr('val', (v + flag) < 0 ? 0 : (v + flag))
            })
        };
        var init = function () {
            var ul = $('<ul class="ui-tree"></ul>');
            var li = $('<li class="root"><span>' + obj.ptext + '</span></li>');
            li.appendTo(ul);
            ul.appendTo(self);
            if (!obj.expanded) {
                addnode1(li, obj.pid)
            } else {
                addnode2(li, obj.pid)
            }
        };
        init()
    }
})(jQuery);
(function ($) {
    $.fn.treeview = function (options) {
        var defaultVal = {
            url: '',
            pid: '00000000-0000-0000-0000-000000000000',
            keyval: 'M_CName',
            keyid: 'ModuleID',
            pval: 'M_ParentID',
            level: 'M_Level',
            childcount: 'M_ChildCount',
            issyn: false,
            tree_open: 'folder-open',
            tree_close: 'folder-close',
            onCreate: function (n, row) { }
        };
        var obj = $.extend(defaultVal, options);
        var html = "<img></img><span class='ui-icon ui-icon-folder-collapsed'></span><span></span>";

        var addnode = function (self, node) {
            var pid = node.children().eq(2).attr('val');
            $.getJSON(obj.url, {
                pid: pid
            }, function (data) {
                $.each(data, function (i, n) {
                    treenode(self, node, n)
                })
            })
        };
        var treenode = function (self, node, n) {
            self.children().eq(0).hide();
            var length = 20 * n[obj.level];
            var row = self.children().eq(0).clone().show();
            var count = row.children().length;
            var td = null;
            row.attr('id', $('#' + n[obj.pval]).parent().parent().attr('id') + '_' + n[obj.pval]);
            for (var j = 0; j < count; j++) {
                td = row.children().eq(j);
                if (td.attr('name') == obj.keyid) {
                    td.children().eq(0).css('width', length + 'px');
                    td.children().eq(1).attr('id', n[obj.keyid]);
                    td.children().eq(2).html(n[obj.keyval]);
                    if (n[obj.childcount].toString() != "0") {
                        td.children().eq(1).addClass(obj.tree_open).css('cursor', 'pointer');
                        td.children().eq(1).bind("click", function () {
                            folderclick(this)
                        })
                    }
                } else {
                    td.html(n[td.attr('name')]);
                    if (n[obj.childcount] == 0) {
                        td.children().eq(0).show()
                    } else {
                        td.children().eq(0).hide()
                    }
                }
            }
            row.hover(function () {
                $(this).addClass('ui-state-hover')
            }, function () {
                $(this).removeClass('ui-state-hover')
            });
            if (n[obj.pval] == obj.pid || obj.issyn) {
                self.append(row);
            } else {
                $('#' + n[obj.pval]).parent().parent().after(row);
            } if (obj.onCreate != null) {
                obj.onCreate(n, row)
            }
        };
        var folderclick = function (btn) {
            var pid = $(btn).attr('id');
            var tr = $('tr[id *= ' + pid + ']');
            var className = $(btn).attr("class");
            if (className.indexOf(obj.tree_close) > -1) {
                $(btn).removeClass(obj.tree_close).addClass(obj.tree_open);
                if (tr.is(":hidden")) {
                    tr.show()
                }
            } else {
                $(btn).removeClass(obj.tree_open).addClass(obj.tree_close);
                tr.hide()
            }
        };


        return this.each(function () {
            var self = $(this);
            var node = self.children().eq(0).attr('id', 'tr_0');
            addnode(self, node);
            return self
        })

    }
})(jQuery);
(function ($) {
    var noop = function () {
        return true
    };
    var frameCount = 0;
    $.uploadDefault = {
        url: '',
        fileName: 'filedata',
        dataType: 'json',
        rule: "gif|jpg|jpeg|png|GIF|JPG|PNG",
        params: {},
        onSend: noop,
        onSubmit: noop,
        onComplate: noop
    };
    var suffix = function (file_name) {
        var result = file_name.toLowerCase().substr(file_name.lastIndexOf(".") + 1);
        return result;
    };
    $.fn.upload = function (options) {
        var self = $(this);
        var opts = $.extend(jQuery.uploadDefault, options);
        if (opts.url == '') {
            return
        }
        var canSend = opts.onSend();
        if (!canSend) {
            return
        }
        var frameName = 'upload_frame_' + (frameCount++);
        var iframe = $('<iframe style="position:absolute;top:-9999px" />').attr('name', frameName);
        var form = $('<form method="post" style="display:none;" enctype="multipart/form-data" />').attr('name', 'form_' + frameName);
        form.attr("target", frameName).attr('action', opts.url);
        var formHtml = '<input type="file" name="' + opts.fileName + '">';

        for (key in opts.params) {
            formHtml += '<input type="hidden" name="' + key + '" value="' + opts.params[key] + '">'
        }
        form.append(formHtml);
        iframe.appendTo("body");
        form.appendTo("body");

        var fileInput = $('input[type=file][name=' + opts.fileName + ']', form);
        fileInput.change(function () {
            var fileInput = $('input[type=file]', form);
            var suf = suffix(fileInput.val());
            if (opts.rule.indexOf(suf) < 0) {
                opts.onSubmit(suf + "格式不符合要求");
                return false;
            }
            form.submit();

            iframe.load(function () {
                var contents = $(this).contents().get(0);
                var data = $(contents).find('body').text();
                if ('json' == opts.dataType) {
                    if (data != "") {
                        data = window.eval('(' + data + ')');
                        self.find('img').attr('src', artui.webImgUrl+data.msg);
                        opts.onComplate(data);
                    }
                }
                setTimeout(function () {
                    iframe.remove();
                    form.remove()
                }, 5000);
            });
        });
        fileInput.click();
    }
})(jQuery);

(function ($) {
    $.fn.dragtable = function (options) {

        var defaultVal = {
            cont: null,
            relation: null,
            isScroll: true
        };
        var dl = null, self = null;
        var currtd = null; //当前td
        var lt = null;     //当前td的宽度 
        var num = 0;       //当前第几个td  
        var scrollwidth = 0; //滚动条的宽度

        var obj = $.extend(true, defaultVal, options);

        var trag = function (elems) {

            var cont = obj.cont;
            elems.each(function (i, n) {
                var td = $(this);
                var txt = td.html();
                if (td.children('div').length == 0) {
                    td.html("<div style='position:relative;height:100%;width:100%;line-height: 25px;'>" +
                                         "<div style='" +
                                         "position:absolute;height:100%;width:5px;" +
                                         "right: -9px;top:0px;cursor:e-resize;z-index:10;'>" +
                                         "</div>" + txt);
                }

                if (td.attr('style') == undefined) {

                    td.children().eq(0).children().eq(0).mousedown(function (e) {
                        var deltaX = td.offset().left;
                        dl = $('<div class="left"> </div>').css({
                            "left": td.offset().left + "px",
                            "top": cont.offset().top + "px",
                            "height": obj.relation.outerHeight() + td.outerHeight(),
                            "width": td.outerWidth()
                        }).appendTo("body");

                        var isMove = true;
                        $(document).mousemove(function (e) {
                            if (isMove) {
                                currtd = td;
                                num = i;
                                lt = e.clientX - deltaX;
                                lt = lt < 0 ? 0 : lt;
                                dl.width(lt);
                            }
                        }).mouseup(function () {
                            isMove = false;
                            $(this).unbind("mousemove").unbind("mouseup");
                            if (currtd != null) {
                                var w = currtd.width();
                                currtd.css("width", lt + "px");
                                if (obj.relation != null) {
                                    obj.relation.find("tr:eq(0)").children('td').eq(num).css("width", lt + "px");
                                    obj.relation.find("tr:eq(1)").children('td').eq(num).css("width", lt + "px");
                                    obj.relation.parent().attr("resize", "1");
                                }

                                var outwidth = self.parent().outerWidth() + (lt - w);
                                if (obj.isScroll && scrollwidth == 0) {
                                    scrollwidth = 16;
                                }
                                if (!obj.isScroll) {
                                    scrollwidth = 0;
                                }
                                obj.cont.children('div').eq(0).width(outwidth);
                                obj.cont.children('div').eq(1).width(outwidth + scrollwidth);

                            }
                            dl.remove();
                        });
                    });

                }
            });

        };
        return this.each(function () {
            self = $(this);
            var elems = self.find("tr:eq(0)").children('th');
            trag(elems);
        });
    }
})(jQuery);